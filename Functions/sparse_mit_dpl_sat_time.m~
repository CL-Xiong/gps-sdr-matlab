% =========================================================================
%> @brief QuickSync algorithm implementation with doppler correction and 1000 Hz of accuracy. 
%> @details 
%> Doppler correction performed in time by means of a complex
%> exponential multiplication. Structure for detection is doppler->sat->buckets.  
%>    -# GPS PRN Correlator Detector (parallel code phase search) 
%>    -# Doppler search step: 1000 Hz.
%>    -# Uses data 1ms in length (corresponds to 1 PRN) sampled at Fs
%> @date      May 15, 2014
%> @pre       Former File Name: sparse_mit_sat_out.m
%> @bug       Code Phase delay may be different by 1 unit.
%> @note      This file represents the function version of the file name sparse_mit_sat_out.m
%> @author    Capstone Team
%> @param dataset Selects the data set to be read for data. For more information on the data sets available refer to \ref rawFiles.
%> @param fs Sampling frequency 
%> @param fi Intermediate frequency
%> @param satellites List of prn satellites numbers to be detected. Values should range from 1 to 32.
%> @param thresholdsparse Value to determine when a detection is valid
%>
%> @retval whole_set List of syncronization values to be returned.
% =========================================================================
function whole_set = sparse_mit_dpl_sat_time(dataset,fs,fi,satellites,thresholdsparse)


%Search for the number of arguments the user put when calling the function
switch nargin
    case 1
        error('Please enter sampling frequency and intermediate frequency')
    case 2
        error('Intermediate frequency value is compulsory')
    case 3
        satellites = [1:32];
    case 4
        if (max(satellites)>37) || (min(satellites)<1) || (min(satsize(satellites))~=1)
            error('sv must be a row or column vector with integers between 1 and 37\n')
        end
        thresholdsparse = 9;
    case 5
        %do nothing. User entered all values into the function
    otherwise
        error('Wrong number of input values')
end

ts=1/fs;


%==========================================================================
% RAW DATA 1 Settings (I y Q) (Present 01 03 07 19 20 22 24 28 31)
% satellites=[01 03 07 19 20 22 24 28 31];
% fs=12000000;
% ts=1/fs;
% fi=3563000;
%==========================================================================

%==========================================================================
% %RAW DATA 2 Settings  (solo I, hay que modificar codigo para correr y subir la otra gps file)
% satellites=[01 21 29 30 31];
% fs=5456000;
% ts=1/fs;
% fi=4092000;
%==========================================================================

%==========================================================================
%RAW DATA 3 Settings (I y Q) Akos-Book (21 is present according to book, 19 is not)
%(detected: ?3, 6,  21, 22, 26, 29,) 
% satellites=[3 4 6 9 15 18 21 22 26];
% fs=38192000;
% ts=1/fs;
% fi=9548000;
%==========================================================================

%==========================================================================
%RAW DATA 4 Settings (I y Q) Akos-Book ( 2nd data set)
% satellites=[01 02 03 04 05 06 07 17 19 21 22 23 24 25 26 27 28 29 30 31]; %(detected: 19,...)
% fs=16367600;
% ts=1/fs;
% fi=4130400;
%==========================================================================

%==========================================================================
%RAW DATA 5 
% satellites=[22 3 19 14 18 11 32 6]; %(sorted from strongest to weakest
% fs=16367600;
% ts=1/fs;
% fi=4130400;
%==========================================================================


g=cacode(satellites, fs/1023000); %Creates the matrix of prn codes
ntemp=length(g(1,:));    %Obtain pulse size based on the output of cacode 
%function. Note that the size is stored in a temporary variable. This is
%made in order to allow the script to work with any sampling frequency.

p= round(sqrt(log(ntemp)/log(2)));   %define p according to the formula but with rounding its value instead of flooring it.
B = round(ntemp/p);                  %define the bucket downsampling unit as n/p according to the papers annotations
ceil_floor = 0;                     %determine operation 0 = floor, 1 =  ceil
if(B*p == ntemp)
    n=ntemp;                   %if B*p is equal to the size of the pulse, then n = ntemp
else
    if(B*p > ntemp)                    %check if the new value os different than the old value of n, if yes, then n changes
        n= B*p;                         %define the signal new size, ensure that it always keep a length of B*p
        ceil_floor = 1;
    else                                %else (B*p < ntemp) , this is a floor 
        n= B*p;                         %define the signal new size, ensure that it always keep a length of B*p
        ceil_floor = 0;
    end 
end
k = 5;                          %number of buckets to be used
maxallowedbymemory=n*p*k;       %data read from file

% SELECT DATA FILE TO READ
switch dataset
    case 1
        % Data Set 1: compact.bin should be compactdataq_etc_etc...
        % [fid, message] = fopen('compact.bin', 'r', 'b');
        % data = fread(fid,maxallowedbymemory, 'ubit1')';
        % fclose(fid);
        [fid, message] = fopen('compact.bin', 'r', 'b');
        data = fread(fid,maxallowedbymemory, 'ubit1')';
        fclose(fid);
   case 2
       % Data 2, with I component only
        %[fid, message] = fopen('gps.samples.1bit.I.fs5456.if4092.bin', 'r', 'b');
        %
        % 
      statements
    case 3
        % Data 3, from Borre-Akos book
        % [fid, message] = fopen('GPSdata-DiscreteComponents-fs38_192-if9_55.bin', 'r', 'b');
        % data = fread(fid,maxallowedbymemory, 'bit8')';
        % fclose(fid);
        [fid, message] = fopen('GPSdata-DiscreteComponents-fs38_192-if9_55.bin', 'r', 'b');
        data = fread(fid,maxallowedbymemory, 'bit8')';
        fclose(fid);
    case 4
        % % Data 4, from Borre-Akos book (2nd data set)
        % [fid, message] = fopen('GPS_and_GIOVE_A-NN-fs16_3676-if4_1304.bin', 'r', 'b');
        % data = fread(fid,maxallowedbymemory, 'bit8')';
        % fclose(fid);
        [fid, message] = fopen('GPS_and_GIOVE_A-NN-fs16_3676-if4_1304.bin', 'r', 'b');
        data = fread(fid,maxallowedbymemory, 'bit8')';
        fclose(fid);
    case 5
        % % Data 5, 
        % [fid, message] = fopen('gioveAandB_short.bin', 'r', 'b');
        % data = fread(fid,maxallowedbymemory, 'bit8')';
        % fclose(fid);
        [fid, message] = fopen('gioveAandB_short.bin', 'r', 'b');
        data = fread(fid,maxallowedbymemory, 'bit8')';
        fclose(fid);
    otherwise
       error('Wrong data set number');
end

nn=0:length(data)-1;
ficarrierQ=((cos(2*pi*fi*nn*ts)));
ficarrierI=((sin(2*pi*fi*nn*ts)));

% ******* I and Q using XOR of 1s and 0s *******
ficarrierI2=ficarrierI>0; % positives go to 1 negatives go to 0
ficarrierQ2=ficarrierQ>0;  % positives go to 1 negatives go to 0
data=data>0;
datafiI=xor(data,ficarrierI2); % xor data  with sin to obtain I
datafiQ=xor(data,ficarrierQ2); % xor data  with cos to obtain Q
wholesignal=(2*datafiI-1)+1*1i*(2*datafiQ-1);


% %******** I and Q using . (multiplication of 1s and -1s)********
% data = data * 2 - 1; %To convert values to +/- 1
% ficarrierI2=2*ceil(ficarrierI)-1; % 
% ficarrierQ2=2*ceil(ficarrierQ)-1; % 
% datafiI=(data.*ficarrierI2);
% datafiQ=(data.*ficarrierQ2);
% wholesignal=(datafiI)+1*j*(datafiQ);

%Variable preallocation. As recommende by MATLAB, variables that change
%size in a loop should be first declared. This increase execution speed.

cornp2 = (1:p);     %store result of final correlation between the doppler
% corrected signal and the pulse.
whole_set(length(satellites),6) = 0; %variable holding important values 
%after threshold is detected. The matrix stores variables in the following
%order per PRN: PRN-SNR-Doppler Shift- Deviation from IF- Code Phase-
%number of buckets.


bucketnp(n*p) = 0;      %var holding the data in chunks of size p*n.
bucketnpexp(k,n*p) = 0;     % var holding the data with doppler correction by means of complex exponential multiplication.
fftbucketfolded(k,B) = 0;    %var holding the aliased bucket (B samples apart are sum up together)

xs(B) = 0;      %acumulation bucket results
xss(B) = 0;     %acumulation bucket results without peak signal
possibledelay(p) = 0;   %vector holding the p possible delays.

delays(length(satellites),p) = 0; %variable holding the p possible delay per
% satellites detected.
outputfoldedbuckets(B)=0;           %variable storing the output of the ifft


pulses = g;  %obtain prn pulses code given the PRN number
if(ntemp ~= n)
    if(ceil_floor == 0)
        pulses = pulses(:,1:n);
    else
        pulses(:,n) = 0;
    end
end
pulses = pulses*2-1;          %change 0 by -1.
conjfftpulsesfolded(length(satellites),B) = 0;

%Perform pulse manipulation outside main loop. Here memory usage is
%increased but execution time is reduced.
for prncounter=1:1:length(satellites)
    pulsesfolded = sum(reshape(pulses(prncounter,:),B,p).');
    fftpulsesfolded = fft(pulsesfolded);
    conjfftpulsesfolded(prncounter,:) = conj(fftpulsesfolded);
end

tic     %start counting execution time
range = 0:n*p-1; %range for exponential multiplication

for frequencydopplershift=-10*p:1:10*p
    
    for ii=1:k
        exponential = exp(1i*(2*pi/(n*p))*frequencydopplershift.*range);
        bucketnp=wholesignal((ii-1)*p*n+1:ii*n*p);
        if(ntemp ~= n)
            if(ceil_floor == 0)
                bucketnp = bucketnp(1:n*p);
                length(bucketnp);
            else
                bucketnp(n*p) = 0;
                length(bucketnp);
            end
        end
        bucketnpexp(ii,:) =  bucketnp.*exponential;
        bucketfolded= sum(reshape(bucketnpexp(ii,:),B,p^2).');
        fftbucketfolded(ii,:)=fft(bucketfolded);     % FFT of folded length-p*n bucket
    end
    stop = 0;
     
    for prncounter=1:1:length(satellites)
        
        xs = zeros(1,B);    %clean accumulation buckets variable before going to other satellite
        xss= zeros(1,B);    %clean accumulation buckets variable before going to other satellite
        SNRmethod4=0; % SNR method 4 init
        stop = 0;           %stop detection when for a given doppler threshold value is exceeded
              
         for ii=1:k
            %IFFT of the pointwise product of fft of folded pulse and fft of folded
            %bucket
            outputfoldedbuckets=ifft(conjfftpulsesfolded(prncounter,:).*fftbucketfolded(ii,:));

            %Find the magnitude of the reult added to the accumulated
            %buckets
            xs=(abs(outputfoldedbuckets).^2)+xs;% accumulated output buckets to enhance detection peak

           
            % Looking for the sample with the largest spike in the accumulated output bucket
            % The delay in the bucket is the largest sample positon.
            % For example, if it is a delay of n/p+x or 2*n/p+x this method gives x as the delay in the folded bucket.
            % Therefore we have to find a way to settle the ambiguity (see below)

            [sizepeak,delayinfoldedbucket]=max(xs); %delay estimation based on the accumulation of several output buckets
            xss = xs; % auxiliary variable to mantain the accumulator untouched
            %SIGNAL TO NOISE RATIO  (signal: peak power    noise: noise floor power)
            xss(delayinfoldedbucket)=0; %take peak out of accumulated output folded bucket
            noisefloorpwr=mean(xss);%power of noise bed in output folded bucket
            SNRmethod2=(sizepeak/noisefloorpwr);
            
            
            if stop == 0 && SNRmethod2>thresholdsparse  % threshold comparison 
               buckets_used_method2=ii;                  %amount of data of size n*p used for detection
               detected_doppler_shift = -(frequencydopplershift) ;%Doppler shift calculated based on doppler from break
               deviation_from_IF=fi+detected_doppler_shift*(1000)/p;
               detected_code_phase_folded=delayinfoldedbucket;
               stop = 1;
               
               for jj=1:p                    
                   possibledelay(jj)= detected_code_phase_folded+(jj-1)*n/p;
               end

               for jj=1:p
                    cornp2(jj)=sum(pulses(prncounter,:).*bucketnpexp(ii,(possibledelay(jj):possibledelay(jj)+n-1)));
                    
               end
               [size,delaychoice]=max(abs(cornp2));
               detected_code_phase=detected_code_phase_folded+(delaychoice-1)*n/p;
               if SNRmethod2 > whole_set(prncounter,2)
                    delays(prncounter,:) = [possibledelay];
                    whole_set(prncounter,:) = [satellites(prncounter),round(SNRmethod2),deviation_from_IF,detected_doppler_shift,detected_code_phase,ii];
               end
               
            end
        end
    end
end

executiontime = toc